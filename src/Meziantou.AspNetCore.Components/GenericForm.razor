@typeparam TModel
@implements IGenericForm

@if (fields != null)
{
    foreach (var field in fields.OrderBy(p => p.DisplayOrder))
    {
        if (FieldTemplate != null)
        {
            @FieldTemplate(field)
        }
        else
        {
            <div>
                <label for="@field.EditorId">@field.DisplayName</label>
                @field.EditorTemplate
                @field.FieldValidationTemplate
            </div>
        }
    }
}

@code {
    private string _baseEditorId = Guid.NewGuid().ToString();
    private List<GenericFormField>? fields;

    string IGenericForm.BaseEditorId => _baseEditorId;
    object? IGenericForm.Model => Model;

    [Parameter]
    public TModel? Model { get; set; }

    [Parameter]
    public EventCallback<TModel> ModelChanged { get; set; }

    [Parameter]
    public bool EnableFieldValidation { get; set; } = true;

    [Parameter]
    public string? EditorClass { get; set; }

    [Parameter]
    public RenderFragment<GenericFormField>? FieldTemplate { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (fields != null)
        {
            foreach (var field in fields)
            {
                field.ValueChanged -= OnValueChanged;
            }
        }

        if (Model != null)
        {
            fields = GenericFormField.Create(this);
            foreach (var field in fields)
            {
                field.ValueChanged += OnValueChanged;
            }
        }
        else
        {
            fields = null;
        }
    }

    private void OnValueChanged(object? sender, EventArgs e)
    {
        _ = InvokeAsync(() => ModelChanged.InvokeAsync(Model));
    }
}